% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/Gaussian_Process_Survival.R
\name{gpsrc}
\alias{gpsrc}
\alias{gpsrc.default}
\alias{gpsrc.formula}
\alias{predict.gpsrc}
\title{Gaussian process for survival, regression and classification}
\usage{
gpsrc(x, ...)

\method{gpsrc}{formula}(formula, data = environment(formula), ...)

\method{gpsrc}{default}(x, y, scaled = TRUE, kernel = "rbfdot",
  kpar = "automatic", var = 1, family = switch(class(y), Surv = "cox",
  factor = ifelse(nlevels(y) > 2, "multinomial", "binomial"), integer =
  "poisson", "gaussian"), ...)

\method{predict}{gpsrc}(object, newdata, type = c("response", "probabilities",
  "link", "risk"))
}
\arguments{
\item{x}{Design matrix (NO intercept)}

\item{...}{Further argument passed to internal functions}

\item{formula}{Model formula}

\item{data}{Data}

\item{y}{Reponse vector of type double, integer, factor or Surv}

\item{scaled}{Logical value indicating if to standardize x, y}

\item{kernel}{String or 'kernel' object (see kernlab::gausspr)}

\item{kpar}{A list of Kernel parameters or 'automatic' if a radial kernel specified}

\item{var}{Variance of response (from the Gaussian process). Only for regression}

\item{family}{Options are 'gaussian', 'binomial', 'multinomial', 'poisson', 'cox'}

\item{object}{'gpsrc' object from \code{gpsrc}}

\item{newdata}{Design matrix of test set}

\item{type}{Type of output}
}
\value{
A 'gprsc' object
}
\description{
It works for classification, regression, cox regression and poission regression
The first/main purpose is to implement Gaussian process into Cox's model
The glmnet is used to solve a general Ridge-regularized regression solver. This may be changed in the future.
}
\examples{
## classification
library(pROC);
library(mlbench);
data(Sonar);
i.tr <- sample(nrow(Sonar), size = 0.6*nrow(Sonar));

gp <- gpsrc(Class ~., data = Sonar[i.tr,], kpar = list(sigma = 0.01))
gp.pred <- predict(gp, Sonar[-i.tr, ], type = 'prob')
cat('AUC:', roc(Sonar$Class[-i.tr], gp.pred[, 2])$auc, '\\n');

## regression

data(BostonHousing);
BH <- BostonHousing;
i.tr <- sample(nrow(BH), 200);

gp2 <- gpsrc(medv ~., data = BH[i.tr, ], kpar = list(sigma = 0.1));
gp2.pred <- predict(gp2, BH[-i.tr, ])
cat('RMSE:', sqrt(mean((BH$medv[-i.tr] - gp2.pred)^2)), '\\n');

## survival

library(survival);
data(pbc, package = 'randomForestSRC');
pbc <- na.omit(pbc);
i.tr <- sample(nrow(pbc), 100);

gp <- gpsrc(Surv(days, status) ~., data = pbc[i.tr, ],
	kernel = 'laplacedot', kpar = list(sigma = 0.1));
gp.pred <- predict(gp, pbc[-i.tr, ])
cat('C-index:', survConcordance(Surv(days, status) ~ gp.pred, data = pbc[-i.tr, ])$concordance, '\\n');
}

